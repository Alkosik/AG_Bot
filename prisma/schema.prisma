// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String        @id @default(cuid()) @map("_id")
  username            String?       @unique
  email               String?       @unique
  emailVerified       DateTime?
  image               String?
  role                String?       @default("user")
  plugins             Plugin[]
  updatedPlugins      Plugin[]      @relation("updatedBy")
  files               File[]
  accounts            Account[]
  sessions            Session[]
  subscription_active Boolean?      @default(false)
  subscription        Subscription?
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id         String   @id @default(cuid()) @map("_id")
  userId     String   @unique
  active     Boolean  @default(true)
  message_id String
  timestamp  DateTime
  name       String
  tier       String?
  User       User     @relation(fields: [userId], references: [id])
}

model Plugin {
  id            String        @id @default(cuid()) @map("_id")
  key           String
  title         String
  image_id      String
  author        String
  description   String?
  version       String
  crack         String?
  disabled      Boolean?      @default(false)
  keygen        Boolean?
  platform      Platform      @default(WIN)
  architecture  Architecture? @default(Intel)
  categories    Category[]    @default([])
  guides        Guide[]
  note          String?
  files         File[]
  created_at    DateTime      @default(now())
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  updated_at    DateTime?     @updatedAt
  updated_by    User?         @relation("updatedBy", fields: [updated_by_id], references: [id])
  updated_by_id String?
}

enum Platform {
  WIN
  MAC
}

enum Architecture {
  U2B
  Both
  ARM
  Intel
}

enum Category {
  DAW
  EQ
  Effect
  Synth
  Instrument
  Utility
  Other
}

model Guide {
  id       String  @id @default(cuid()) @map("_id")
  title    String?
  type     String
  guide_id String? @unique
  video    String?
  version  String?
  plugin   Plugin  @relation(fields: [pluginId], references: [id])
  pluginId String  @unique
}

model File {
  id           String        @id @default(cuid()) @map("_id")
  plugin       Plugin        @relation(fields: [pluginId], references: [id])
  pluginId     String        @unique
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  name         String?
  version      String?
  latest       Boolean?      @default(true)
  platform     Platform
  architecture Architecture?
  runtime      String?
  note         String?
  type         FileTypes
  link         String?
  filename     String?
  crack        String?
  keygen       Boolean?
  downloads    Int           @default(0)
  created_at   DateTime      @default(now())
}

enum FileTypes {
  Plugin
  Library
  Other
}
